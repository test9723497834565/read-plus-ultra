create or replace package body plus_ultra.read as

  c_words_per_level   constant number := 10;
  c_revision_percent  constant number := 0.3; -- 30%
  
  procedure insert_syllable(
    i_word_id   word.id%type
   ,i_syllable  words_to_read.s1%type
   ,i_order     word_syllable.syllable_order%type
  )
  is
    l_id        number;
  begin
    if i_syllable is null then
      return;
    end if;
    select id_gen_seq.nextval into l_id from dual;
    insert into syllable (id, mastered, text) values(l_id, c_not_practiced, i_syllable);
    insert into word_syllable (word_id, syllable_id, syllable_order) values (i_word_id, l_id, i_order);
  exception
    when others then
      raise;
  end insert_syllable;


  procedure get_words(o_words in out sys_refcursor)
  is
    l_level     read_level.id%type;
    l_id        number;
  begin
    -- which is the last not completed level
    begin
      select id into l_level from read_level where ended is null;
      update read_level set last_started = sysdate where id = l_level;
    exception
      when no_data_found then
        -- level does not exists, let's create it
        select coalesce(max(id),0) + 1 into l_level from read_level;
        insert into read_level (id, started, last_started) values (l_level, sysdate, sysdate);
       
        -- copy some rows from words_to_read and insert them into words and syllables.
        for rec in (select id, s1, s2, s3, s4, s5, s6, s7, s8, s9 from (
                 select id, s1, s2, s3, s4, s5, s6, s7, s8, s9 from words_to_read order by freq desc
                  ) a where rownum < c_words_per_level
        ) loop
          update words_to_read set copied = 'Y' where id = rec.id;
          select id_gen_seq.nextval into l_id from dual;
          insert into word (id, mastered, read_level_id) values (l_id, c_not_practiced, l_level);
          insert_syllable(l_id, rec.s1, 1);
          insert_syllable(l_id, rec.s2, 2);
          insert_syllable(l_id, rec.s3, 3);
          insert_syllable(l_id, rec.s4, 4);
          insert_syllable(l_id, rec.s5, 5);
          insert_syllable(l_id, rec.s6, 6);
          insert_syllable(l_id, rec.s7, 7);
          insert_syllable(l_id, rec.s8, 8);
          insert_syllable(l_id, rec.s9, 9);
        end loop;
    end;

    -- add random revisions up to 30% of c_words_per_level
    if l_level > 1 then
      update word set read_level_id = l_level where id in (
        select id from (
          select id from word where read_level_id != l_level order by dbms_random.value
        ) a where rownum <= round(c_words_per_level * c_revision_percent)
      );
    end if;
    
    open o_words for
      select id, text, c_syllable type from (
        -- select syllables to be studied in level
        select c.id, c.text, max(c.mastered) mastered, max(c.last_studied) last_studied
        from word a 
        join word_syllable b on (a.id = b.word_id)
        join syllable c on (b.syllable_id = c.id)
        where a.read_level_id = l_level
        and c.mastered != c_mastered
        and 1 != (select count(*) from word_syllable where word_id = a.id)
        group by c.id, c.text
        order by mastered, last_studied
      )
    union all
      select id, text, c_word type from ( 
        -- select words to be studied in level
        select a.id, a.mastered, a.last_studied, 
        listagg(c.text, decode(a.mastered, c_not_practiced, '   ', c_practiced ,'  ', c_improving, ' ', '')) within group (order by b.syllable_order) as text
        from word a 
        join word_syllable b on (a.id = b.word_id)
        join syllable c on (b.syllable_id = c.id)
        where a.read_level_id = l_level
        and a.mastered != c_mastered
        group by a.id, a.mastered, a.last_studied
        order by a.mastered, a.last_studied
    );
  exception
    when others then
      raise;
  end get_words;
  
  
  procedure send_stats(
	  i_id       number   
	 ,i_text     varchar2
	 ,i_type     varchar2
	 ,i_start    date
	 ,i_end      date
	 ,i_read     varchar2)
  is
    l_mastered     number;
    l_sec_elpased  number;
  begin
    -- compute mastered level
    if i_read = '-' then
      l_mastered := c_practiced;
    elsif i_read = '+' then
      l_sec_elpased := (i_end - i_start) * 24.0 * 60.0 * 60.0;
      
      if l_sec_elpased < 3.0 then
        l_mastered := c_mastered;
      elsif l_sec_elpased < 5.0 then
        l_mastered := c_improving;
      else
        l_mastered := c_practiced;
      end if;
    end if;
  
    -- update last studied and mastered
    case i_type
      when c_word then
        update word set last_studied = sysdate, mastered = l_mastered where id = i_id;
        update syllable set last_studied = sysdate where id in (select syllable_id from word_syllable where word_id = i_id);
      when c_syllable then
        update syllable set last_studied = sysdate, mastered = l_mastered where id = i_id;
      else null;
    end case;
    
    -- add to stats
    insert into read_stat (id, time_start, time_end, type) values (i_id, i_start, i_end, i_type);
    commit;
  exception
    when others then
      raise;
  end send_stats;


  procedure start_session(
	  i_session_type     varchar2
	 ,i_start            date
  )
  is
    l_row_id        rowid;
    l_last_time     date;
    l_sec_elpased   number;
    
  begin
    -- find a previous session
    begin
      select rowid, coalesce(time_end_temp, time_start) into l_row_id, l_last_time 
      from session_stat where session_type = i_session_type and time_end is null;
              
      l_sec_elpased := (i_start - l_last_time) * 24.0 * 60.0 * 60.0;
      
      if l_sec_elpased < 70 then
        -- update last time
        update session_stat set time_end_temp = i_start where rowid = l_row_id;
      else
        -- close last session
        update session_stat set time_end = time_end_temp where rowid = l_row_id;
        insert into session_stat (session_type, time_start) values (i_session_type, i_start);
      end if;
      
    exception
      when no_data_found then
        insert into session_stat (session_type, time_start) values (i_session_type, i_start);
    end;
    
    commit;
  exception
    when others then
      raise;
  end start_session;

end read;


